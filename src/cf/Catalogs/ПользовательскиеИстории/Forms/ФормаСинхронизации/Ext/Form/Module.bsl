
&НаКлиенте
Перем ВариантыОбъединения;

&НаКлиенте
Процедура Синхронизировать(Команда)
	Если ВариантОбъединения.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран вариант объединения! Синхронизация прервана.";
		Сообщение.Поле = "ВариантОбъединения";
		Сообщение.Сообщить();	
		
	ИначеЕсли ВариантОбъединения = ВариантыОбъединения.Настраиваемый Тогда
		ОбновитьПользовательскуюИсториюИзФичи();
		ОбновитьФичуИзПользовательскойИстории();
		
	ИначеЕсли ВариантОбъединения = ВариантыОбъединения.СозданиеFeatureФайла Тогда
		СоздатьФичу();
		
	ИначеЕсли ВариантОбъединения = ВариантыОбъединения.СозданиеПользовательскойИстории Тогда
		СоздатьПользовательскуюИсторию();
		
	ИначеЕсли ВариантОбъединения = ВариантыОбъединения.ОбновлениеПутиКФичеВПользовательскойИстории Тогда
		ОбновитьПутьКФичеВПользовательскойИстории();
		
	ИначеЕсли ВариантОбъединения = ВариантыОбъединения.ОбновлениеНомераПользовательскойИсторииВФиче Тогда
		ОбновитьНомерПользовательскойИсторииВФиче();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПользовательскуюИсториюИзФичи()
	ОбновитьПользовательскуюИсториюИзФичиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскуюИсториюИзФичиНаСервере() 
	НастройкиСинхронизацииНаСервере = РеквизитФормыВЗначение("НастройкиСинхронизации");
	
	ПараметрыОтбора = Новый Структура;
	
	ПараметрыОтбора.Вставить("РежимОбъединения", Перечисления.РежимыОбъединения.ВзятьИзFeature);
	
	НайденныеСтроки = НастройкиСинхронизации.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ПользовательскаяИсторияОбъект = ПользовательскаяИстория.ПолучитьОбъект();
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если Строка.Поле = Перечисления.ПоляСинхронизации.Заголовок Тогда
			ПользовательскаяИсторияОбъект.Заголовок = Строка.ЗначениеВFeature;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Путь Тогда
			ПользовательскаяИсторияОбъект.ПутьКФиче = Строка.ЗначениеВFeature;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Персона Тогда
			ПользовательскаяИсторияОбъект.Персона = Строка.ЗначениеВAgiler;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Функциональность Тогда
			ПользовательскаяИсторияОбъект.НеобходимаяФункциональность = Строка.ЗначениеВAgiler;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.КлючевоеДействие Тогда
			ПользовательскаяИсторияОбъект.КлючевоеДействие = Строка.ЗначениеВAgiler;
			
		Иначе
			Продолжить;

		КонецЕсли;
		
		Если ТипЗнч(Строка.ЗначениеВAgiler) = Тип("Строка") Тогда
			Строка.ЗначениеВAgiler = Строка.ЗначениеВFeature;
			
		КонецЕсли;
	КонецЦикла;

	ПользовательскаяИсторияОбъект.Записать();

	ЗначениеВРеквизитФормы(НастройкиСинхронизацииНаСервере, "НастройкиСинхронизации");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФичуИзПользовательскойИстории() 
	ПутьКФиче = ПолучитьЗначениеНастроек(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Путь"));
	
	СтрокиФичи = ПрочитатьФичуВСписокЗначений(ПутьКФиче);
	ЗаписатьСписокЗначенийВФичу(СтрокиФичи, ПутьКФиче);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСписокЗначенийВФичу(СтрокиФичи, ПутьКФиче) 
	Писатель = Новый ЗаписьТекста(ПутьКФиче, КодировкаТекста.UTF8);
	
	Для Каждого Строка Из СтрокиФичи Цикл
		Писатель.ЗаписатьСтроку(Строка.Значение);
	КонецЦикла;
	
	Писатель.Закрыть();
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьФичуВСписокЗначений(ПутьКФиче)
	СтрокиФичи = Новый СписокЗначений;
	
	КлючевыеСловаИНовыеЗначения = ПолучитьКлючевыеСловаИНовыеЗначения();
	
	Читатель = Новый ЧтениеТекста(ПутьКФиче, КодировкаТекста.UTF8);

	СтрокиФичи = Новый СписокЗначений;

	ТекущаяСтрока = Читатель.ПрочитатьСтроку();
	Пока Не ТекущаяСтрока = Неопределено Цикл
		ТекущаяСтрока = ОбщегоНазначенияКлиентСервер.УбратьЛишниеПробелыИТабы(ТекущаяСтрока);
		
		ПервыйПробел = СтрНайти(ТекущаяСтрока, " ", , , 1);
		ТекущееКлючевоеСлово = СокрЛП(Лев(ТекущаяСтрока, ПервыйПробел));
		ИскомыйЭлемент = КлючевыеСловаИНовыеЗначения.Получить(ТекущееКлючевоеСлово);
		Если ИскомыйЭлемент = Неопределено Тогда
			ВторойПробел = СтрНайти(ТекущаяСтрока, " ", , , 2);
			ТекущееСловосочетаник = СокрЛП(Лев(ТекущаяСтрока, ВторойПробел));
			ИскомыйЭлемент = КлючевыеСловаИНовыеЗначения.Получить(ТекущееСловосочетаник);
			Если Не ИскомыйЭлемент = Неопределено Тогда
				ТекущаяСтрока = ТекущееСловосочетаник + " " + ИскомыйЭлемент;
			КонецЕсли;
		Иначе
			ТекущаяСтрока = ТекущееКлючевоеСлово + " " + ИскомыйЭлемент;
		КонецЕсли;

		СтрокиФичи.Добавить(ТекущаяСтрока);

		ТекущаяСтрока = Читатель.ПрочитатьСтроку();
	КонецЦикла;
	
	Читатель.Закрыть();

	Возврат СтрокиФичи;
КонецФункции

&НаКлиенте
Функция ПолучитьКлючевыеСловаИНовыеЗначения()
	КлючевыеСловаИНовыеЗначения = Новый Соответствие;
	
	ПараметрыОтбора = Новый Структура;
	
	ПараметрыОтбора.Вставить("РежимОбъединения", ПредопределенноеЗначение("Перечисление.РежимыОбъединения.ВзятьИзAgiler"));
	
	НайденыеСтроки = НастройкиСинхронизации.НайтиСтроки(ПараметрыОтбора);
	Если НайденыеСтроки.Количество() > 0 Тогда
		Для Каждого Строка Из НайденыеСтроки Цикл
			Если Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Заголовок") Тогда
				КлючевыеСловаИНовыеЗначения.Вставить("Функционал", Строка.ЗначениеВAgiler);
				КлючевыеСловаИНовыеЗначения.Вставить("Функциональность", Строка.ЗначениеВAgiler);
				КлючевыеСловаИНовыеЗначения.Вставить("Функционал:", Строка.ЗначениеВAgiler);
				КлючевыеСловаИНовыеЗначения.Вставить("Функциональность:", Строка.ЗначениеВAgiler);

			ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Персона") Тогда
				КлючевыеСловаИНовыеЗначения.Вставить("Как", Строка.ЗначениеВAgiler);
				КлючевыеСловаИНовыеЗначения.Вставить("Как:", Строка.ЗначениеВAgiler);
				
			ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Функциональность") Тогда
				КлючевыеСловаИНовыеЗначения.Вставить("Хочу", Строка.ЗначениеВAgiler);
				КлючевыеСловаИНовыеЗначения.Вставить("Я хочу", Строка.ЗначениеВAgiler);
				КлючевыеСловаИНовыеЗначения.Вставить("Хочу:", Строка.ЗначениеВAgiler);
				КлючевыеСловаИНовыеЗначения.Вставить("Я хочу:", Строка.ЗначениеВAgiler);
				
			ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.КлючевоеДействие") Тогда
				КлючевыеСловаИНовыеЗначения.Вставить("Чтобы", Строка.ЗначениеВAgiler);
				КлючевыеСловаИНовыеЗначения.Вставить("Чтобы:", Строка.ЗначениеВAgiler);

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат КлючевыеСловаИНовыеЗначения;
КонецФункции

&НаКлиенте
Процедура СоздатьФичу() 
	ШаблонФичи = ОбщегоНазначенияКлиент.ПолучитьШаблонФичи();
	
	ПутьКФиче = ПолучитьЗначениеНастроек(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Путь"));
	
	НетОшибок = Истина;
	ЗаполнитьШаблон(ПользовательскаяИстория, ШаблонФичи, НетОшибок);
	
	Если НетОшибок Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		ТекстовыйДокумент.УстановитьТекст(ШаблонФичи);
		
		ТекстовыйДокумент.НачатьЗапись(
			Новый ОписаниеОповещения("ВыгрузитьИзФормыЭлементаЗавершение", ЭтотОбъект), 
			ПутьКФиче, КодировкаТекста.UTF8
		);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеНастроек(Поле) 
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Поле", Поле);
	
	НайденыеСтроки = НастройкиСинхронизации.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденыеСтроки[0].ЗначениеВAgiler;
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеНастроекФичи(Поле) 
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Поле", Поле);
	
	НайденыеСтроки = НастройкиСинхронизации.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденыеСтроки[0].ЗначениеВFeature;
КонецФункции

&НаКлиенте
Процедура СоздатьПользовательскуюИсторию()
	Если Не КолонкаВзятьИзAgilerЗаполнена() Тогда
		Возврат;		
	КонецЕсли;
	
	СоздатьПользовательскуюИсториюИЗаполнитьНастройкиСинхронизации();
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВыполнитьОбновлениеНомераПользовательскойИсторииВФиче", ЭтотОбъект)
		, "После создания пользовательской истории рекомендуеться обновить её номер в feature файле. Выполнить обновление?",
		РежимДиалогаВопрос.ДаНет
	);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбновлениеНомераПользовательскойИсторииВФиче(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНомерПользовательскойИсторииВФиче();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПутьКФичеВПользовательскойИстории()
	НовыйПутьКФиче = ПолучитьЗначениеНастроекФичи(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Путь"));
	
	ОбновитьПутьКФичеВПользовательскойИсторииНаСервере(НовыйПутьКФиче);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНомерПользовательскойИсторииВФиче()
	ПутьКФичеВAgiler = ПолучитьЗначениеНастроек(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Путь"));
	ПутьКФичеВFeature = ПолучитьЗначениеНастроекФичи(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Путь"));
	
	Если Не ПутьКФичеВAgiler = ПутьКФичеВFeature Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Путь к feature файлу из agiler отличается от реального местонахождения.";
		Сообщение.Сообщить();	
		
		Возврат;
	КонецЕсли;
	
	НомерФичи = ПолучитьЗначениеНастроек(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Номер"));
	
	ТекстФичи = Новый ЧтениеТекста(ПутьКФичеВAgiler, КодировкаТекста.UTF8);
	
	ТегНумерации = ОбщегоНазначенияКлиент.ПолучитьТегНумерации();
	
	СтрокиФичи = Новый СписокЗначений;
	
	ИндексТекущейСтрокиФичи = 0;
	
	ИндексСтрокиФункциональности = Неопределено;
	ИндексСтрокиТегаНумерации = Неопределено;
	
	ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
	Пока Не ТекущаяСтрока = Неопределено Цикл
		ТекущаяСтрока = ОбщегоНазначенияКлиентСервер.УбратьЛишниеПробелыИТабы(ТекущаяСтрока);
		
		СтрокиФичи.Добавить(ТекущаяСтрока);
		
		ПервыйПробел = СтрНайти(ТекущаяСтрока, " ");
		ТекущееКлючевоеСлово = СокрЛП(Лев(ТекущаяСтрока, ПервыйПробел));
		
		Если Ложь
			Или ТекущееКлючевоеСлово = "Функционал"
			Или ТекущееКлючевоеСлово = "Функциональность"
			Или ТекущееКлючевоеСлово = "Функционал:"
			Или ТекущееКлючевоеСлово = "Функциональность:"
			Тогда
			
			ИндексСтрокиФункциональности = ИндексТекущейСтрокиФичи;
			
		ИначеЕсли СтрНайти(ТекущаяСтрока, ТегНумерации) > 0 Тогда
			ИндексСтрокиТегаНумерации = ИндексТекущейСтрокиФичи;
			
		КонецЕсли;
		
		ИндексТекущейСтрокиФичи = ИндексТекущейСтрокиФичи + 1;
		
		ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
	КонецЦикла;
	
	ТекстФичи.Закрыть();
	
	Если ИндексСтрокиТегаНумерации = Неопределено Тогда
		Если ИндексСтрокиФункциональности = Неопределено Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не корректное содержание feature файла! Не удалось найти заголовок пользовательской истории.";
			Сообщение.Сообщить();	
			
			Возврат;
		Иначе
			СтрокиФичи.Вставить(ИндексСтрокиФункциональности, ТегНумерации + НомерФичи);
			СтрокиФичи.Вставить(ИндексСтрокиФункциональности + 1, "");
			
		КонецЕсли;
	Иначе
		СтрокиФичи[ИндексСтрокиТегаНумерации].Значение = ТегНумерации + НомерФичи;
	КонецЕсли;
	
	Писатель = Новый ЗаписьТекста(ПутьКФичеВAgiler, КодировкаТекста.UTF8);
	
	Для Каждого Строка Из СтрокиФичи Цикл
		Писатель.ЗаписатьСтроку(Строка.Значение);
	КонецЦикла;
	
	Писатель.Закрыть();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПутьКФичеВПользовательскойИсторииНаСервере(НовыйПутьКФиче)
	НастройкиСинхронизацииНаСервере = РеквизитФормыВЗначение("НастройкиСинхронизации");
	
	ПользовательскаяИсторияОбъект = ПользовательскаяИстория.ПолучитьОбъект();
	
	ПользовательскаяИсторияОбъект.ПутьКФиче = НовыйПутьКФиче;
	
	ПользовательскаяИсторияОбъект.Записать();
	
	//---
	
	ИскомаяСтрока = НастройкиСинхронизацииНаСервере.Найти(Перечисления.ПоляСинхронизации.Путь, "Поле");
	Если Не ИскомаяСтрока = Неопределено Тогда
		ИскомаяСтрока.ЗначениеВAgiler = НовыйПутьКФиче;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(НастройкиСинхронизацииНаСервере, "НастройкиСинхронизации");
КонецПроцедуры

&НаКлиенте
Функция КолонкаВзятьИзAgilerЗаполнена()
	Результат = Истина;
	
	Текст = "Не заполнены обязательные строки из колонки ""agile""";
	
	ПоляИсключения = Новый Массив;
	
	ПоляИсключения.Добавить(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Номер"));
	ПоляИсключения.Добавить(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Путь"));
	ПоляИсключения.Добавить(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Заголовок"));
	
	ПерваяСтрока = Истина;
	
	Для Каждого Строка Из НастройкиСинхронизации Цикл
		Если ЭтоПолеВИсключениях(Строка.Поле, ПоляИсключения) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ЗначениеВAgiler) Тогда
			Результат = Ложь;
			
			Текст = Текст + ?(ПерваяСтрока, ": ", "; ")  + Строка.Поле;
			
			ПерваяСтрока = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Текст = Текст + ". Синхронизация прервана!";
	
	Если Не Результат Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текст;
		Сообщение.Сообщить();	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура СоздатьПользовательскуюИсториюИЗаполнитьНастройкиСинхронизации()
	НастройкиСинхронизацииНаСервере = РеквизитФормыВЗначение("НастройкиСинхронизации");
	
	НоваяПользовательскаяИстория = Справочники.ПользовательскиеИстории.СоздатьЭлемент();
	
	НоваяПользовательскаяИстория.УстановитьНовыйКод();
	НоваяПользовательскаяИстория.Владелец = БизнесЦель;
	
	Для Каждого Строка Из НастройкиСинхронизацииНаСервере Цикл
		Если Строка.Поле = Перечисления.ПоляСинхронизации.Путь Тогда
			НоваяПользовательскаяИстория.ПутьКФиче = Строка.ЗначениеВFeature;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Заголовок Тогда
			НоваяПользовательскаяИстория.Заголовок = Строка.ЗначениеВFeature;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Персона Тогда
			НоваяПользовательскаяИстория.Персона = Строка.ЗначениеВAgiler;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Функциональность Тогда
			НоваяПользовательскаяИстория.НеобходимаяФункциональность = Строка.ЗначениеВAgiler;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.КлючевоеДействие Тогда
			НоваяПользовательскаяИстория.КлючевоеДействие = Строка.ЗначениеВAgiler;
			
		КонецЕсли;
	КонецЦикла;
	
	НоваяПользовательскаяИстория.Записать();
	
	ПользовательскаяИстория = НоваяПользовательскаяИстория.Ссылка;
	
	Для Каждого Строка Из НастройкиСинхронизацииНаСервере Цикл
		Если Строка.Поле = Перечисления.ПоляСинхронизации.Номер Тогда
			Строка.ЗначениеВAgiler = НоваяПользовательскаяИстория.НомерФичи;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Заголовок Тогда
			Строка.ЗначениеВAgiler = НоваяПользовательскаяИстория.Заголовок;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Путь Тогда
			Строка.ЗначениеВAgiler = НоваяПользовательскаяИстория.ПутьКФиче;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(НастройкиСинхронизацииНаСервере, "НастройкиСинхронизации");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПолеВИсключениях(ТекущееПоле, ПоляИсключения)
	Результат = Истина;
	
	ИскомоеПоле = ПоляИсключения.Найти(ТекущееПоле);
	Если ИскомоеПоле = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура НайтиFeatureБезНомера(Команда)
	КаталогПроекта = ОбщегоНазначенияСервер.ПолучитьКаталогПроекта(БизнесЦель);
	
	ПараметрыПоиска = Новый Структура;
	
	ПараметрыПоиска.Вставить("ВариантПоиска", "НайтиБезНомера");
	
	ТегНумерации = ОбщегоНазначенияКлиент.ПолучитьТегНумерации();
	
	ПараметрыПоиска.Вставить("ТегНумерации", ТегНумерации);
	
	НачатьПоискФайлов(
		Новый ОписаниеОповещения("НайтиВсеФичиВКаталогеПроектаЗавершение", 
			ЭтотОбъект, ПараметрыПоиска)
		, КаталогПроекта, "*.feature", истина
	);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СоздатьПоляНастроекСинхронизации();
	ЗаполнитьРеквизитыФормыИзПараметров();
	ЗагрузитьТекущийЭлементВНастройки();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыИзПараметров()
	ИменаЗаполняемыхРеквизитов = Новый Массив;
	
	ИменаЗаполняемыхРеквизитов.Добавить("БизнесЦель");
	ИменаЗаполняемыхРеквизитов.Добавить("ПользовательскаяИстория");
	
	Для Каждого ИмяЗаполняемогоРеквизита Из ИменаЗаполняемыхРеквизитов Цикл
		Если Параметры.Свойство(ИмяЗаполняемогоРеквизита) Тогда
			ЭтаФорма[ИмяЗаполняемогоРеквизита] = Параметры[ИмяЗаполняемогоРеквизита];
		КонецЕсли;
	КонецЦикла;
	
	//---
	
	Если ЗначениеЗаполнено(ПользовательскаяИстория) Тогда
		БизнесЦель = ПользовательскаяИстория.Владелец;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьПоляНастроекСинхронизации()
	НастройкиСинхронизацииНаСервере = РеквизитФормыВЗначение("НастройкиСинхронизации");
	
	СоздатьПолеНастроекСинхронизации(НастройкиСинхронизацииНаСервере, Перечисления.ПоляСинхронизации.Заголовок, "");
	СоздатьПолеНастроекСинхронизации(НастройкиСинхронизацииНаСервере, Перечисления.ПоляСинхронизации.Путь, "");
	СоздатьПолеНастроекСинхронизации(НастройкиСинхронизацииНаСервере, Перечисления.ПоляСинхронизации.Номер, "");
	СоздатьПолеНастроекСинхронизации(
		НастройкиСинхронизацииНаСервере, Перечисления.ПоляСинхронизации.Персона, Справочники.Персоны.ПустаяСсылка()
	);
	СоздатьПолеНастроекСинхронизации(
		НастройкиСинхронизацииНаСервере, Перечисления.ПоляСинхронизации.Функциональность, 
			Справочники.Функциональности.ПустаяСсылка()
	);
	СоздатьПолеНастроекСинхронизации(
		НастройкиСинхронизацииНаСервере, Перечисления.ПоляСинхронизации.КлючевоеДействие, 
		Справочники.КлючевыеДействия.ПустаяСсылка()
	);
	
	ЗначениеВРеквизитФормы(НастройкиСинхронизацииНаСервере, "НастройкиСинхронизации");
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьЗначенияКолонок(Элемент)
	Если Элемент.ТекущийЭлемент.Имя = "НастройкиСинхронизацииЗначениеВAgiler" Тогда
		ТекущийТип = ТипЗнч(Элемент.ТекущиеДанные.ЗначениеВAgiler);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТекущийТип);
		
		Элемент.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		Элемент.ТекущийЭлемент.ВыбиратьТип = Ложь;
		
		Если ТекущийТип = Тип("Строка") Тогда
			Элемент.ТекущийЭлемент.КнопкаВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьПолеНастроекСинхронизации(Таблица, Поле, Значение)
	НоваяСтрока = Таблица.Добавить();
	
	НоваяСтрока.Поле = Поле;
	НоваяСтрока.ЗначениеВAgiler = Значение;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТекущийЭлементВНастройки()
	Если Не ЗначениеЗаполнено(ПользовательскаяИстория) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСинхронизацииНаСервере = РеквизитФормыВЗначение("НастройкиСинхронизации");
	
	Для Каждого Строка Из НастройкиСинхронизацииНаСервере Цикл
		Если Строка.Поле = Перечисления.ПоляСинхронизации.Заголовок Тогда
			Строка.ЗначениеВAgiler = ПользовательскаяИстория.Заголовок;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Путь Тогда
			Строка.ЗначениеВAgiler = ПользовательскаяИстория.ПутьКФиче;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Номер Тогда
			Строка.ЗначениеВAgiler = ПользовательскаяИстория.НомерФичи;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Персона Тогда
			Строка.ЗначениеВAgiler = ПользовательскаяИстория.Персона;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Функциональность Тогда
			Строка.ЗначениеВAgiler = ПользовательскаяИстория.НеобходимаяФункциональность;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.КлючевоеДействие Тогда
			Строка.ЗначениеВAgiler = ПользовательскаяИстория.КлючевоеДействие;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(НастройкиСинхронизацииНаСервере, "НастройкиСинхронизации");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииПередНачаломИзменения(Элемент, Отказ)
	ОпределитьЗначенияКолонок(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЭлементаЗавершение(ЗаписанУспешно, ДополнительныеПараметры) Экспорт
	Если ЗаписанУспешно Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Feature файл создан.";
		Сообщение.Сообщить();	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблон(ТекущийЭлемент, ШаблонФичи, НетОшибок)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользовательскиеИстории.НомерФичи,
	|	ПользовательскиеИстории.Заголовок,
	|	ПользовательскиеИстории.Персона,
	|	ПользовательскиеИстории.КлючевоеДействие,
	|	ПользовательскиеИстории.НеобходимаяФункциональность
	|ИЗ
	|	Справочник.ПользовательскиеИстории КАК ПользовательскиеИстории
	|ГДЕ
	|	ПользовательскиеИстории.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НетОшибок = Ложь;
		
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ШаблонФичи = СтрЗаменить(ШаблонФичи, "#Номер", ВыборкаДетальныеЗаписи.НомерФичи);
	ШаблонФичи = СтрЗаменить(ШаблонФичи, "#Заголовок", ВыборкаДетальныеЗаписи.Заголовок);
	ШаблонФичи = СтрЗаменить(ШаблонФичи, "#Персона", ВыборкаДетальныеЗаписи.Персона);
	ШаблонФичи = СтрЗаменить(ШаблонФичи, "#КлючевоеДействие", ВыборкаДетальныеЗаписи.КлючевоеДействие);
	ШаблонФичи = СтрЗаменить(ШаблонФичи, "#НеобходимаяФункциональность", ВыборкаДетальныеЗаписи.НеобходимаяФункциональность);
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбъединенияПриИзменении(Элемент)
	ОпределитьРежимОбъединения();
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРежимОбъединения() 
	Если ВариантОбъединения = ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.Настраиваемый") Тогда
		Для Каждого Строка Из НастройкиСинхронизации Цикл
			Строка.РежимОбъединения = Неопределено;
		КонецЦикла;
		
		ДоступностьКолонки = Истина;
		
	ИначеЕсли ВариантОбъединения = ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.СозданиеFeatureФайла") Тогда
		РежимОбъединения = ПредопределенноеЗначение("Перечисление.РежимыОбъединения.ВзятьИзAgiler");
		
		Для Каждого Строка Из НастройкиСинхронизации Цикл
			Строка.РежимОбъединения = РежимОбъединения;
		КонецЦикла;
		
		ДоступностьКолонки = Ложь;
		
	ИначеЕсли ВариантОбъединения = 
			ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.СозданиеПользовательскойИстории") Тогда
		РежимОбъединения = ПредопределенноеЗначение("Перечисление.РежимыОбъединения.ВзятьИзFeature");
		
		Для Каждого Строка Из НастройкиСинхронизации Цикл
			Строка.РежимОбъединения = РежимОбъединения;
			
			Если Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Номер") Тогда
				Строка.РежимОбъединения = ПредопределенноеЗначение("Перечисление.РежимыОбъединения.НеОбъединять");

			КонецЕсли;
		КонецЦикла;
		
		ДоступностьКолонки = Ложь;
		
	ИначеЕсли ВариантОбъединения = 
			ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.ОбновлениеПутиКФичеВПользовательскойИстории") Тогда
		РежимОбъединения = ПредопределенноеЗначение("Перечисление.РежимыОбъединения.НеОбъединять");
		
		Для Каждого Строка Из НастройкиСинхронизации Цикл
			Строка.РежимОбъединения = РежимОбъединения;
			
			Если Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Путь") Тогда
				Строка.РежимОбъединения = ПредопределенноеЗначение("Перечисление.РежимыОбъединения.ВзятьИзFeature");
			КонецЕсли;
		КонецЦикла;
		
		ДоступностьКолонки = Ложь;
		
	ИначеЕсли ВариантОбъединения = 
			ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.ОбновлениеНомераПользовательскойИсторииВФиче") Тогда
		РежимОбъединения = ПредопределенноеЗначение("Перечисление.РежимыОбъединения.НеОбъединять");
		
		Для Каждого Строка Из НастройкиСинхронизации Цикл
			Строка.РежимОбъединения = РежимОбъединения;
			
			Если Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Номер") Тогда
				Строка.РежимОбъединения = ПредопределенноеЗначение("Перечисление.РежимыОбъединения.ВзятьИзAgiler");
			КонецЕсли;
		КонецЦикла;
		
		ДоступностьКолонки = Ложь;
		
	КонецЕсли;
	
	Элементы.НастройкиСинхронизацииРежимОбъединения.Доступность = ДоступностьКолонки;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьFeature(Команда)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Каталог = ОбщегоНазначенияСервер.ПолучитьКаталогПроекта(БизнесЦель);
	ДиалогВыбораФайла.Фильтр = "feature|*.feature";
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыбратьFeatureФайлЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьFeatureФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Фича = ПрочитатьФичу(ВыбранныеФайлы[0]);
	
	Для Каждого Строка Из НастройкиСинхронизации Цикл
		Если Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Путь") Тогда
			Строка.ЗначениеВFeature = Фича.Путь;
			
		ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Номер") Тогда
			Строка.ЗначениеВFeature = Фича.Номер;
			
		ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Заголовок") Тогда
			Строка.ЗначениеВFeature = Фича.Заголовок;
			
		ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Персона") Тогда
			Строка.ЗначениеВFeature = Фича.Персона;
			
		ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Функциональность") Тогда
			Строка.ЗначениеВFeature = Фича.Функциональность;
			
		ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.КлючевоеДействие") Тогда
			Строка.ЗначениеВFeature = Фича.КлючевоеДействие;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьФичу(ВыбранныйФайл)
	Фича = ПодготовитьФичу();
	
	Фича.Путь = ВыбранныйФайл;
	
	ТекстФичи = Новый ЧтениеТекста(ВыбранныйФайл, КодировкаТекста.UTF8);
	
	Пробел = " ";
	
	ИскомыеКлючевыеСлова = Новый Массив;
	
	ИскомыеКлючевыеСлова.Добавить("Функционал");
	ИскомыеКлючевыеСлова.Добавить("Функциональность");
	ИскомыеКлючевыеСлова.Добавить("Как");
	ИскомыеКлючевыеСлова.Добавить("Я хочу");
	ИскомыеКлючевыеСлова.Добавить("Хочу");
	ИскомыеКлючевыеСлова.Добавить("Чтобы");
	
	ИскомыеКлючевыеСлова.Добавить("Функционал:");
	ИскомыеКлючевыеСлова.Добавить("Функциональность:");
	ИскомыеКлючевыеСлова.Добавить("Как:");
	ИскомыеКлючевыеСлова.Добавить("Я хочу:");
	ИскомыеКлючевыеСлова.Добавить("Хочу:");
	ИскомыеКлючевыеСлова.Добавить("Чтобы:");
	
	ТегНумерации = ОбщегоНазначенияКлиент.ПолучитьТегНумерации();
	
	ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
	Пока Не ТекущаяСтрока = Неопределено Цикл
		ТекущаяСтрока = ОбщегоНазначенияКлиентСервер.УбратьЛишниеПробелыИТабы(ТекущаяСтрока);
		
		Если СтрНайти(ТекущаяСтрока, ТегНумерации) > 0 Тогда
			Фича.Номер = СтрЗаменить(ТекущаяСтрока, ТегНумерации, "");
			
			ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
			
			Продолжить;
		КонецЕсли;
		
		ПервыйПробел = СтрНайти(ТекущаяСтрока, " ", , , 1);
		ТекущееКлючевоеСлово = СокрЛП(Лев(ТекущаяСтрока, ПервыйПробел));
		
		ВторойПробел = СтрНайти(ТекущаяСтрока, " ", , , 2);
		ТекущееСловосочетаник = СокрЛП(Лев(ТекущаяСтрока, ВторойПробел));
		
		ОставшаясяЧасть = СокрЛП(Сред(ТекущаяСтрока, ПервыйПробел));
		ОставшаясяЧастьВторойПробел = СокрЛП(Сред(ТекущаяСтрока, ВторойПробел));
		
		Для Каждого ИскомоеКлючевоеСлово Из ИскомыеКлючевыеСлова Цикл
			Если ТекущееКлючевоеСлово = ИскомоеКлючевоеСлово Тогда
				Если Ложь
					//TODO Убрать этот ад
					Или ТекущееКлючевоеСлово = "Функционал"
					Или ТекущееКлючевоеСлово = "Функциональность"
					Или ТекущееКлючевоеСлово = "Функционал:"
					Или ТекущееКлючевоеСлово = "Функциональность:"
					Тогда
					
					Фича.Заголовок = ОставшаясяЧасть;
					
				ИначеЕсли Ложь
					Или ТекущееКлючевоеСлово = "Как"
					Или ТекущееКлючевоеСлово = "Как:"
					Тогда
					
					Фича.Персона = ОставшаясяЧасть;
					
				ИначеЕсли Ложь
					Или ТекущееКлючевоеСлово = "Хочу"
					Или ТекущееКлючевоеСлово = "Хочу:"
					Тогда
					
					Фича.Функциональность = ОставшаясяЧасть;
					
				ИначеЕсли Ложь
					//TODO Убрать этот ад
					Или ТекущееКлючевоеСлово = "Чтобы"
					Или ТекущееКлючевоеСлово = "Чтобы:"
					Тогда
					
					Фича.КлючевоеДействие = ОставшаясяЧасть;
					
				КонецЕсли;
				
			ИначеЕсли ТекущееСловосочетаник = ИскомоеКлючевоеСлово Тогда
				Если Ложь
					Или ТекущееСловосочетаник = "Я хочу"
					Или ТекущееСловосочетаник = "Я хочу:"
					Тогда
					
					Фича.Функциональность = ОставшаясяЧастьВторойПробел;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		//-
		
		ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
	КонецЦикла;
	
	Возврат Фича;
КонецФункции

&НаКлиенте
Функция ПодготовитьФичу()
	Фича = Новый Структура;
	
	Фича.Вставить("Заголовок");
	Фича.Вставить("Путь");
	Фича.Вставить("Номер");
	Фича.Вставить("Персона");
	Фича.Вставить("Функциональность");
	Фича.Вставить("КлючевоеДействие");
	
	Возврат Фича;
КонецФункции

&НаКлиенте
Процедура НайтиFeatureПоНомеру(Команда)
	КаталогПроекта = ОбщегоНазначенияСервер.ПолучитьКаталогПроекта(БизнесЦель);
	
	ПараметрыПоиска = Новый Структура;
	
	НомерФичи = ПолучитьЗначениеНастроек(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Номер"));
	
	ПараметрыПоиска.Вставить("НомерФичи", НомерФичи);
	ПараметрыПоиска.Вставить("ВариантПоиска", "НайтиПоНомеру");
	
	ТегНумерации = ОбщегоНазначенияКлиент.ПолучитьТегНумерации();
	
	ПараметрыПоиска.Вставить("ТегНумерации", ТегНумерации);
	
	НачатьПоискФайлов(
		Новый ОписаниеОповещения("НайтиВсеФичиВКаталогеПроектаЗавершение", ЭтотОбъект, ПараметрыПоиска),
		КаталогПроекта, "*.feature", Истина
	);
КонецПроцедуры

&НаКлиенте
Процедура НайтиВсеФичиВКаталогеПроектаЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	Если Ложь
		Или НайденныеФайлы = Неопределено
		Или НайденныеФайлы.Количество() = 0
		Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найдены feature файлы.";
		Сообщение.Сообщить();	
		
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВариантПоиска = "НайтиПоНомеру" Тогда
		НайтиФичуПоНомеру(НайденныеФайлы, ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ВариантПоиска = "НайтиБезНомера" Тогда
		НайтиФичуБезНомера(НайденныеФайлы, ДополнительныеПараметры);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиФичуПоНомеру(НайденныеФайлы, ДополнительныеПараметры)
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		Файл = НайденныйФайл.ПолноеИмя;
		
		ТекстФичи = Новый ЧтениеТекста(Файл, КодировкаТекста.UTF8);
		
		ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
		Пока Не ТекущаяСтрока = Неопределено Цикл
			Если СтрНайти(ТекущаяСтрока, ДополнительныеПараметры.ТегНумерации) > 0 Тогда
				НайденныйНомер = СокрЛП(СтрЗаменить(ТекущаяСтрока, ДополнительныеПараметры.ТегНумерации, ""));
				Если НайденныйНомер = ДополнительныеПараметры.НомерФичи Тогда
					ВыбранныеФайлы = Новый Массив;
					
					ВыбранныеФайлы.Добавить(Файл);
					
					ВыбратьFeatureФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры);
				КонецЕсли;
			КонецЕсли;
			
			//---
			ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НайтиФичуБезНомера(НайденныеФайлы, ДополнительныеПараметры) 
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		Файл = НайденныйФайл.ПолноеИмя;
		
		ТекстФичи = Новый ЧтениеТекста(Файл, КодировкаТекста.UTF8);
		
		ЕстьНомер = Ложь;
		
		ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
		Пока Не ТекущаяСтрока = Неопределено Цикл
			Если СтрНайти(ТекущаяСтрока, ДополнительныеПараметры.ТегНумерации) > 0 Тогда
				ЕстьНомер = Истина;
				
				Прервать;
			КонецЕсли;
			
			//---
			ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
		КонецЦикла;
		
		Если Не ЕстьНомер Тогда
			ВыбранныеФайлы = Новый Массив;
			
			ВыбранныеФайлы.Добавить(Файл);
			
			ВыбратьFeatureФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры);
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФичу(Команда)
	СтрокаКоманды = ПолучитьЗначениеНастроекФичи(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Путь"));
	Если ПустаяСтрока(СтрокаКоманды) Тогда
		Возврат;
	КонецЕсли;

	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОткрытьФичуЗавершение", ЭтотОбъект), СтрокаКоманды);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФичуЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Feature файл открыт во внешнем редакторе.";
	Сообщение.Сообщить();	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательскаяИсторияОткрытие(Элемент, СтандартнаяОбработка)
	ОткрытьФорму("Справочник.ПользовательскиеИстории.ФормаОбъекта", Новый Структура("Ключ", ПользовательскаяИстория));
КонецПроцедуры

&НаКлиенте
Процедура НайтиОбъектИнфобазы(Команда)
	ПараметрыПоиска = Новый Структура("ИсходнаяСтрокаПоиска,ТекущийСправочник");
	
	ИмяТекущегоЭлементаФормы = ЭтаФорма.ТекущийЭлемент.Имя;
	Если ИмяТекущегоЭлементаФормы = "НастройкиСинхронизации" Тогда
		ТекущиеДанные = Элементы.НастройкиСинхронизации.ТекущиеДанные;
		
		ПараметрыПоиска.ИсходнаяСтрокаПоиска = ТекущиеДанные.ЗначениеВFeature;
		ПараметрыПоиска.ТекущийСправочник = ТекущиеДанные.ЗначениеВAgiler;
		
	ИначеЕсли ИмяТекущегоЭлементаФормы = "ПользовательскаяИстория" Тогда
		ПараметрыПоиска.ИсходнаяСтрокаПоиска = 
			ПолучитьЗначениеНастроекФичи(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Заголовок"));
		ПараметрыПоиска.ТекущийСправочник = ПользовательскаяИстория;
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ПользовательскиеИстории.Форма.ФормаПоиска",
	 ПараметрыПоиска, , , , , 
	 Новый ОписаниеОповещения("НайтиОбъектИнфобазыЗавершение", ЭтотОбъект),
	РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура НайтиОбъектИнфобазыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущегоЭлементаФормы = ЭтаФорма.ТекущийЭлемент.Имя;
	Если ИмяТекущегоЭлементаФормы = "НастройкиСинхронизации" Тогда
		ТекущиеДанные = Элементы.НастройкиСинхронизации.ТекущиеДанные;
		
		ТекущиеДанные.ЗначениеВAgiler = Результат;
		
	ИначеЕсли ИмяТекущегоЭлементаФормы = "ПользовательскаяИстория" Тогда
		ПользовательскаяИстория = Результат;
		
	КонецЕсли;
КонецПроцедуры

ВариантыОбъединения = Новый Структура;

ВариантыОбъединения.Вставить("Настраиваемый", 
	ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.Настраиваемый"));
ВариантыОбъединения.Вставить("СозданиеFeatureФайла", 
	ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.СозданиеFeatureФайла"));
ВариантыОбъединения.Вставить("СозданиеПользовательскойИстории",
	 ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.СозданиеПользовательскойИстории"));
ВариантыОбъединения.Вставить("ОбновлениеНомераПользовательскойИсторииВФиче", 
	ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.ОбновлениеНомераПользовательскойИсторииВФиче"));
ВариантыОбъединения.Вставить("ОбновлениеПутиКФичеВПользовательскойИстории", 
	ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.ОбновлениеПутиКФичеВПользовательскойИстории"));
